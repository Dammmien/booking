import { Props } from 'inferno';
export interface ComponentLifecycle<P, S> {
    componentDidMount?(): void;
    componentWillMount?(): void;
    componentWillReceiveProps?(nextProps: P, nextContext: any): void;
    shouldComponentUpdate?(nextProps: P, nextState: S, nextContext: any): boolean;
    componentWillUpdate?(nextProps: P, nextState: S, nextContext: any): void;
    componentDidUpdate?(prevProps: P, prevState: S, prevContext: any): void;
    componentWillUnmount?(): void;
}
export default class Component<P, S> implements ComponentLifecycle<P, S> {
    static defaultProps: {};
    state: S;
    props: P & Props;
    context: any;
    _blockRender: boolean;
    _blockSetState: boolean;
    _pendingSetState: boolean;
    _pendingState: any;
    _lastInput: any;
    _vNode: any;
    _unmounted: boolean;
    _lifecycle: any;
    _childContext: any;
    _patch: any;
    _isSVG: boolean;
    _componentToDOMNodeMap: any;
    _updating: boolean;
    constructor(props?: P, context?: any);
    componentDidMount?(): void;
    componentWillMount?(): void;
    componentWillReceiveProps?(nextProps: P, nextContext: any): void;
    shouldComponentUpdate?(nextProps: P, nextState: S, nextContext: any): boolean;
    componentWillUpdate?(nextProps: P, nextState: S, nextContext: any): void;
    componentDidUpdate?(prevProps: P, prevState: S, prevContext: any): void;
    componentWillUnmount?(): void;
    getChildContext?(): void;
    render(nextProps?: P, nextState?: any, nextContext?: any): void;
    forceUpdate(callback?: Function): void;
    setState(newState: any, callback?: Function): void;
    setStateSync(newState: any): void;
    _updateComponent(prevState: S, nextState: S, prevProps: P & Props, nextProps: P & Props, context: any, force: boolean, fromSetState: boolean): any;
}
